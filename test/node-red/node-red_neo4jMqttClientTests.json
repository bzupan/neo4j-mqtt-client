[
    {
        "id": "018ae56f2112915f",
        "type": "tab",
        "label": "gorenje",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "976b8220983f052f",
        "type": "tab",
        "label": "Neo4j MqTT Client Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "34ef6acb071fe7ef",
        "type": "mqtt-broker",
        "name": "mqtt-v5-localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "localhost-mqtt-v5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "76956db364927c2c",
        "type": "inject",
        "z": "018ae56f2112915f",
        "name": "set path filter",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"path\":\"/opt/gorenje-migracija/data\",\"filter\":\"*.zip\",\"portNumber\":-1}",
        "payloadType": "json",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "301fbd4999b0b6e5",
                "6b9b7cfabf4dc8d8",
                "fa2ea7c000db9d4a"
            ]
        ]
    },
    {
        "id": "b49b838f5b416da3",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 580,
        "wires": []
    },
    {
        "id": "8945677ca9ee1e0f",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 580,
        "wires": []
    },
    {
        "id": "0794a731d794949a",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "files to messages",
        "func": "msg.files.map(function (filename){\n    node.send({ payload: msg.payload.path+\"/\"+filename})\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "787a4588d5671996",
                "fcbf71d9ea7a1ead"
            ]
        ]
    },
    {
        "id": "787a4588d5671996",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 580,
        "wires": []
    },
    {
        "id": "fcbf71d9ea7a1ead",
        "type": "file in",
        "z": "018ae56f2112915f",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 620,
        "wires": [
            [
                "d522aac46872dd80"
            ]
        ]
    },
    {
        "id": "c9c48c5b363d1fc8",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "save zip open",
        "func": "var dir = msg.filename.replace(\".zip\", \"/\")\n\n\nmsg.payload.map(function (data){\n    node.send({ \n        payload:      data.payload,\n        filename: dir + data.filename\n\n\n    })\n})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 480,
        "wires": [
            [
                "baa13e24bf737931",
                "04ad21decac3cde9"
            ]
        ]
    },
    {
        "id": "baa13e24bf737931",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 440,
        "wires": []
    },
    {
        "id": "04ad21decac3cde9",
        "type": "file",
        "z": "018ae56f2112915f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1440,
        "y": 480,
        "wires": [
            [
                "f6c02ade9e18d995"
            ]
        ]
    },
    {
        "id": "f6c02ade9e18d995",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 440,
        "wires": []
    },
    {
        "id": "b1554dc86e73865a",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "get nms.xsf",
        "func": "var dir = msg.filename.replace(\".zip\", \"\")\n\nmsg.payload.map(function (data) {\n    if (data.filename.match(\"nms.xsf\"))\n        node.send({\n            payload: data.payload.toString(),\n            filename: dir + \"-\" + data.filename\n        })\n})\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 620,
        "wires": [
            [
                "7e93913acb9ec77f",
                "01b43af2ad34f0c4"
            ]
        ]
    },
    {
        "id": "7e93913acb9ec77f",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 580,
        "wires": []
    },
    {
        "id": "e2f057bdee01e5a3",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "unconfigure xos cmds",
        "func": "var tmp = { \"vlans\": { \"AP\": { \"tag\": \"7\", \"eapsProtected\": \"Obroc_3801\" }, \"AP_mgmt\": { \"tag\": \"77\", \"eapsProtected\": \"Obroc_3801\" }, \"ASW\": { \"tag\": \"64\", \"eapsProtected\": \"Obroc_3801\" }, \"Cont_3801\": { \"tag\": \"1002\", \"eapsControl\": \"Obroc_3801\" }, \"Energetika\": { \"tag\": \"82\", \"eapsProtected\": \"Obroc_3801\" }, \"Gasilci\": { \"tag\": \"81\", \"eapsProtected\": \"Obroc_3801\" }, \"Gosti\": { \"tag\": \"90\", \"eapsProtected\": \"Obroc_3801\" }, \"Nadzor\": { \"tag\": \"10\", \"eapsProtected\": \"Obroc_3801\" }, \"Old_Wifi\": { \"tag\": \"5\", \"eapsProtected\": \"Obroc_3801\" }, \"Simatic\": { \"tag\": \"61\", \"eapsProtected\": \"Obroc_3801\" }, \"V3801\": { \"tag\": \"137\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje\": { \"tag\": \"84\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje02\": { \"tag\": \"87\", \"eapsProtected\": \"Obroc_3801\" }, \"VoIP_V3801\": { \"tag\": \"337\", \"eapsProtected\": \"Obroc_3801\" }, \"Vzdrzevanje\": { \"tag\": \"80\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_delovni\": { \"tag\": \"93\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_ind\": { \"tag\": \"94\", \"eapsProtected\": \"Obroc_3801\" } }, \"ipAddress\": \"10.60.137.1\", \"sysName\": \"S38011\", \"eapsName\": \"Obroc_3801\", \"valnEapcControl\": \"Obroc_3801\" }\n\nvar data = msg.payload\n\nvar filename = data.path + \"/script_EAPS_lag_\" + data.sysName + \"_\" + data.ipAddress + \".xsf\"\n\n\nif (data.eapsName) {\n\n    var script = \"### eaps detected on: \" + data.sysName + \" \" + data.ipAddress + \"\\n\",\n        script = script + \"disable eaps\\n\\n\"\n\n\n\n    script = script +\"delete eaps \" + data.eapsName + \"\\n\"\n    script = script + \"delete \" + data.valnEapcControl + \"\\n\"\n    script = script + \"enable sharing \" + data.primaryPort + \" grouping \" + data.primaryPort + \" \" + data.secondaryPort +\" algorithm address-based L3_L4 lacp\\n\"\n\n\n    node.send({\n        payload: script,\n        filename: filename\n\n    })\n}\nelse {\n    node.send({\n        payload: \"### no eaps detected on: \" + data.sysName + \" \" + data.ipAddress,\n        filename: filename\n    })\n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 580,
        "wires": [
            [
                "3797501b41febd46",
                "b5dbf29b690686d1"
            ]
        ]
    },
    {
        "id": "3797501b41febd46",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 540,
        "wires": []
    },
    {
        "id": "f31a74cf897b53cf",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "regexp test",
        "func": "const url = \"http://xxx.domain.com\";\nvar aaa = /^https?:\\/\\/(.+?)\\./.exec(url)[1]\n\naaa = url.match(/^https?:\\/\\/(.+?)\\.domain\\.(.+?)/)\n\nvar sys = 'configure snmp sysName \"S58031\"'\n\naaa = sys.match(/configure snmp sysName \"(?<sysname>.+?)\"/)\n\nvar msg = {\npaylaod: aaa\n}\n\n\nconst personList = `First_Name: John, Last_Name: Doe\nFirst_Name: Jane, Last_Name: Smith`;\n\nconst regexpNames =\n    /First_Name: (?<firstname>\\w+), Last_Name: (?<lastname>\\w+)/gm;\nfor (const match of personList.matchAll(regexpNames)) {\n    node.send({\n        payload: `Hello ${match.groups.firstname} ${match.groups.lastname}`\n    });\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "08ffe845385be00e"
            ]
        ]
    },
    {
        "id": "08ffe845385be00e",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 380,
        "wires": []
    },
    {
        "id": "dc89719fdb9dfd5f",
        "type": "inject",
        "z": "018ae56f2112915f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "f31a74cf897b53cf"
            ]
        ]
    },
    {
        "id": "24dbb5c2dac189fe",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.ipAddress",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 580,
        "wires": []
    },
    {
        "id": "01b43af2ad34f0c4",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "get vlan eaps, ... create json",
        "func": "\n// --- initializa return json\nvar obj = {\n    rawData: msg.payload,\n    vlans: {}\n}\n\n// --- get IP\n//\"/opt/gorenje-migracija/data/10_60_10_11x-nms.xsf\"\ntry {\n    obj.ipAddress = msg.filename.match(/(.+)\\/(\\d+_\\d+_\\d+_\\d+)-.*/)[2].replace(/_/g, \".\")\n    obj.path = msg.filename.match(/(.+)\\/(\\d+_\\d+_\\d+_\\d+)-.*/)[1].replace(/_/g, \".\")\n} catch (error) {\n    obj.ipAddress = \"unknown\"\n    obj.path = \"/opt/gorenje-migracija/data\"  \n}\n// --- config to array\nvar configArr = msg.payload.split(\"\\n\")\n//node.send({ payload: configArr})\n\n// --- each line\nvar configs = configArr.map(function (line, i) {\n\n    // --- get sysName\n    if (line.match(\"configure snmp sysName\")) {\n        obj.sysName = msg.payload.match(/configure snmp sysName \"(.+?)\"/)[1]\n    }\n    // configure vlan AP tag 7\n    if (line.match(/configure vlan .* tag .*/)) {\n        var vlanTag = line.match(/configure vlan (.+) tag (.+)/, \"\")[2]\n        var vlanName = line.match(/configure vlan (.+) tag (.+)/, \"\")[1]\n        obj.vlans[vlanName] = {\n            tag: vlanTag,\n            name: vlanName\n        }\n    }\n\n    /*\n    configure eaps Obroc_1301 add protected vlan AP\nconfigure eaps Obroc_1301 add protected vlan ASW\nconfigure eaps Obroc_1301 add protected vlan V1301\nconfigure eaps Obroc_1301 add protected vlan gosti\nconfigure eaps Obroc_1301 add protected vlan Nadzor\nconfigure eaps Obroc_1301 add protected vlan HelpDesk\nconfigure eaps Obroc_1301 add protected vlan WiFi_ind\nconfigure eaps Obroc_1301 add control vlan Cont_1301\nconfigure eaps Obroc_1301 add protected vlan Energetika\n    */\n\n    if (line.match(/configure eaps .* add protected vlan .*/)) {\n\n        obj.eapsName = line.match(/configure eaps (.+) add protected vlan (.+)/)[1]\n        var vlanName = line.match(/configure eaps (.+) add protected vlan (.+)/)[2]\n        obj.vlans[vlanName].eapsProtected = obj.eapsName\n    }\n\n    // configure eaps Obroc_3001 add control vlan Cont_3001\n    if (line.match(/configure eaps .* add control vlan .*/)) {\n\n        obj.valnEapcControl = line.match(/configure eaps (.+) add control vlan (.+)/)[2]\n        var vlanName = line.match(/configure eaps (.+) add control vlan (.+)/)[2]\n        obj.vlans[vlanName].eapsControl = obj.valnEapcControl\n\n    }\n//configure eaps Obroc_1301 primary port 1: 23\n//configure eaps Obroc_1301 secondary port 5: 24\n\n    if (line.match(/configure eaps .* primary port .*/)) {\n        var primaryPort = line.match(/configure eaps (.+) primary port (.+)/)[2]\n        obj.primaryPort = primaryPort\n\n    }\n\n    if (line.match(/configure eaps .* secondary port .*/)) {\n        var secondaryPort = line.match(/configure eaps (.+) secondary port (.+)/)[2]\n        obj.secondaryPort = secondaryPort\n\n    }\n\n\n\n    if (i === (configArr.length - 1)) {\n        node.send({\n            payload: obj,\n            rawData: msg.payload,\n            filename: msg.filename\n        })\n    }\n\n})\nreturn;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 620,
        "wires": [
            [
                "24dbb5c2dac189fe",
                "1de693bed6082e57",
                "e2f057bdee01e5a3",
                "44cb1c67f3a0fdfa",
                "9ce9286ee4a117c8"
            ]
        ]
    },
    {
        "id": "1de693bed6082e57",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 540,
        "wires": []
    },
    {
        "id": "b5dbf29b690686d1",
        "type": "file",
        "z": "018ae56f2112915f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2020,
        "y": 580,
        "wires": [
            [
                "6f7994fd1994ad85"
            ]
        ]
    },
    {
        "id": "6f7994fd1994ad85",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 540,
        "wires": []
    },
    {
        "id": "44cb1c67f3a0fdfa",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "configure voss cmds",
        "func": "var tmp = { \"vlans\": { \"AP\": { \"tag\": \"7\", \"eapsProtected\": \"Obroc_3801\" }, \"AP_mgmt\": { \"tag\": \"77\", \"eapsProtected\": \"Obroc_3801\" }, \"ASW\": { \"tag\": \"64\", \"eapsProtected\": \"Obroc_3801\" }, \"Cont_3801\": { \"tag\": \"1002\", \"eapsControl\": \"Obroc_3801\" }, \"Energetika\": { \"tag\": \"82\", \"eapsProtected\": \"Obroc_3801\" }, \"Gasilci\": { \"tag\": \"81\", \"eapsProtected\": \"Obroc_3801\" }, \"Gosti\": { \"tag\": \"90\", \"eapsProtected\": \"Obroc_3801\" }, \"Nadzor\": { \"tag\": \"10\", \"eapsProtected\": \"Obroc_3801\" }, \"Old_Wifi\": { \"tag\": \"5\", \"eapsProtected\": \"Obroc_3801\" }, \"Simatic\": { \"tag\": \"61\", \"eapsProtected\": \"Obroc_3801\" }, \"V3801\": { \"tag\": \"137\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje\": { \"tag\": \"84\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje02\": { \"tag\": \"87\", \"eapsProtected\": \"Obroc_3801\" }, \"VoIP_V3801\": { \"tag\": \"337\", \"eapsProtected\": \"Obroc_3801\" }, \"Vzdrzevanje\": { \"tag\": \"80\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_delovni\": { \"tag\": \"93\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_ind\": { \"tag\": \"94\", \"eapsProtected\": \"Obroc_3801\" } }, \"ipAddress\": \"10.60.137.1\", \"sysName\": \"S38011\", \"eapsName\": \"Obroc_3801\", \"valnEapcControl\": \"Obroc_3801\" }\n\nvar data = msg.payload\n\nvar filename = data.path + \"/Core1_port1.txt\"\n\nif (data.eapsName) {\n    // --- get set store portNumber\n    var configObject = global.get(\"configObject\")\n    var portNumber = configObject.portNumber\n    portNumber = portNumber + 1\n    configObject.portNumber = portNumber\n    global.set(\"configObject\", configObject)\n\n    var portQuotient = Math.floor(portNumber / 24) + 1\n    var portRemainder = (portNumber % 24) +1\n}\n\n\nvar script = \"\\n### switch - sysName: \" + data.sysName + \" ipAddress: \" + data.ipAddress + \" primaryPort:\" + data.primaryPort + \" secondaryPort: \" + data.secondaryPort+\"\\n\"\n\nObject.keys(data.vlans).map(function(vlan, i){\n    var vlanObj = data.vlans[vlan] \n    if (vlanObj.eapsProtected) {\n        script = script + \"vlan members \" + vlanObj.tag + \" \" + portQuotient + \"/\" + portRemainder+\" portmember\\n\"\n    }\n\n    if (i +1 === Object.keys(data.vlans).length ) {\n        node.send({\n            payload: script,\n            filename: filename\n\n        })\n    }\n} )\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 680,
        "wires": [
            [
                "194ae21b7641e162",
                "7761aedf420921ce"
            ]
        ]
    },
    {
        "id": "194ae21b7641e162",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 640,
        "wires": []
    },
    {
        "id": "7761aedf420921ce",
        "type": "file",
        "z": "018ae56f2112915f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2020,
        "y": 680,
        "wires": [
            [
                "af2112526571c7dd"
            ]
        ]
    },
    {
        "id": "af2112526571c7dd",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2080,
        "y": 640,
        "wires": []
    },
    {
        "id": "301fbd4999b0b6e5",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "set configObject",
        "func": "global.set(\"configObject\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fa2ea7c000db9d4a",
        "type": "delay",
        "z": "018ae56f2112915f",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 620,
        "wires": [
            [
                "2b7bfd2375be1974"
            ]
        ]
    },
    {
        "id": "9ce9286ee4a117c8",
        "type": "function",
        "z": "018ae56f2112915f",
        "name": "save to json",
        "func": "var tmp = { \"vlans\": { \"AP\": { \"tag\": \"7\", \"eapsProtected\": \"Obroc_3801\" }, \"AP_mgmt\": { \"tag\": \"77\", \"eapsProtected\": \"Obroc_3801\" }, \"ASW\": { \"tag\": \"64\", \"eapsProtected\": \"Obroc_3801\" }, \"Cont_3801\": { \"tag\": \"1002\", \"eapsControl\": \"Obroc_3801\" }, \"Energetika\": { \"tag\": \"82\", \"eapsProtected\": \"Obroc_3801\" }, \"Gasilci\": { \"tag\": \"81\", \"eapsProtected\": \"Obroc_3801\" }, \"Gosti\": { \"tag\": \"90\", \"eapsProtected\": \"Obroc_3801\" }, \"Nadzor\": { \"tag\": \"10\", \"eapsProtected\": \"Obroc_3801\" }, \"Old_Wifi\": { \"tag\": \"5\", \"eapsProtected\": \"Obroc_3801\" }, \"Simatic\": { \"tag\": \"61\", \"eapsProtected\": \"Obroc_3801\" }, \"V3801\": { \"tag\": \"137\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje\": { \"tag\": \"84\", \"eapsProtected\": \"Obroc_3801\" }, \"Varovanje02\": { \"tag\": \"87\", \"eapsProtected\": \"Obroc_3801\" }, \"VoIP_V3801\": { \"tag\": \"337\", \"eapsProtected\": \"Obroc_3801\" }, \"Vzdrzevanje\": { \"tag\": \"80\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_delovni\": { \"tag\": \"93\", \"eapsProtected\": \"Obroc_3801\" }, \"WiFi_ind\": { \"tag\": \"94\", \"eapsProtected\": \"Obroc_3801\" } }, \"ipAddress\": \"10.60.137.1\", \"sysName\": \"S38011\", \"eapsName\": \"Obroc_3801\", \"valnEapcControl\": \"Obroc_3801\" }\n\nvar data = msg.payload\n\nvar filename = data.path + \"/\" + data.ipAddress + \"_\" + data.sysName + \".json\"\n\nnode.send({\n    payload: JSON.stringify(data,null, 1),\n    filename: filename\n\n})\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 780,
        "wires": [
            [
                "2b8ec898c13afad7",
                "06d1c495831465fe"
            ]
        ]
    },
    {
        "id": "2b8ec898c13afad7",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 740,
        "wires": []
    },
    {
        "id": "06d1c495831465fe",
        "type": "file",
        "z": "018ae56f2112915f",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2020,
        "y": 780,
        "wires": [
            [
                "d232a217bb627935"
            ]
        ]
    },
    {
        "id": "d232a217bb627935",
        "type": "debug",
        "z": "018ae56f2112915f",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 740,
        "wires": []
    },
    {
        "id": "6b9b7cfabf4dc8d8",
        "type": "fs-ops-delete",
        "z": "018ae56f2112915f",
        "name": "",
        "path": "payload.path",
        "pathType": "msg",
        "filename": "Core1_port1.txt",
        "filenameType": "str",
        "x": 290,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "2b7bfd2375be1974",
        "type": "fs-ops-dir",
        "z": "018ae56f2112915f",
        "name": "list files",
        "path": "payload.path",
        "pathType": "msg",
        "filter": "payload.filter",
        "filterType": "msg",
        "dir": "files",
        "dirType": "msg",
        "x": 440,
        "y": 620,
        "wires": [
            [
                "b49b838f5b416da3",
                "0794a731d794949a"
            ]
        ]
    },
    {
        "id": "d522aac46872dd80",
        "type": "zip",
        "z": "018ae56f2112915f",
        "name": "",
        "mode": "decompress",
        "filename": "",
        "compressionlevel": 6,
        "outasstring": false,
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "8945677ca9ee1e0f",
                "b1554dc86e73865a"
            ]
        ]
    },
    {
        "id": "4f0c1d39437d444f",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request - regular \"node\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 290,
        "y": 480,
        "wires": [
            [
                "d6ac97214a827e87",
                "c6b09e6565f14d0e",
                "034f4ec8893c0dde"
            ]
        ]
    },
    {
        "id": "f9b3bb962b8dbe25",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 840,
        "wires": []
    },
    {
        "id": "9aec7142db263609",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/results",
        "topic": "neo4j/cypherQuery/results",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 840,
        "wires": [
            [
                "f9b3bb962b8dbe25"
            ]
        ]
    },
    {
        "id": "d6ac97214a827e87",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "d": true,
        "name": "mqtt with v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherQuery/results",
        "contentType": "",
        "userProps": "",
        "correl": "correlationId-test01",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "1abafd2a0b9d4a2b",
        "type": "comment",
        "z": "976b8220983f052f",
        "name": "README cypherQuery",
        "info": "// --- Subscribe to MqTT Topic for Cypher Query  \nCALL mqtt.subscribeCypherQuery(\n    'mqttBrokerId', \n    'neo4j/cypherQuery/request', \n    {\n        responseTopic:'neo4j/cypherQuery/resultsDefault'\n    }\n) \n\n// --- Subscribe to MqTT Topic for Cypher Query  listen encripted messages\nCALL mqtt.subscribeCypherQuery(\n    'mqttBrokerId', \n    'neo4j/cypherQuery/requestEncripted', \n    {\n        responseTopic:'neo4j/cypherQuery/resultsDefault',\n        encription: \"aes-cbc\",\n        ivBase64: \"FnAxDoCHpgHkrZr3jRGmbA==\",\n        keyBase64: \"2ggLKL4wxTwmZQ8kPMCT8A==\"\n    }\n)\n\n\n",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "79a18f354d642bab",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request regular \"non graph\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"RETURN 'string string text' AS string\"}",
        "payloadType": "json",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "d6ac97214a827e87",
                "c6b09e6565f14d0e",
                "034f4ec8893c0dde"
            ]
        ]
    },
    {
        "id": "1662bf45a333a2cc",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request - regular \"graph\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message WITH n MERGE (n)-[l:MQTTTest]->(m:MqttTestNode) RETURN *\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "d6ac97214a827e87",
                "c6b09e6565f14d0e",
                "034f4ec8893c0dde"
            ]
        ]
    },
    {
        "id": "6b4c74b85d50a187",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request - error request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"RETaaURN 'string string text' AS string\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "d6ac97214a827e87",
                "c6b09e6565f14d0e",
                "034f4ec8893c0dde"
            ]
        ]
    },
    {
        "id": "05571c3586200374",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request - non regular  empty request ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{}",
        "payloadType": "json",
        "x": 300,
        "y": 560,
        "wires": [
            [
                "d6ac97214a827e87",
                "c6b09e6565f14d0e",
                "034f4ec8893c0dde"
            ]
        ]
    },
    {
        "id": "5ae15fbd62e3fd6f",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/resultsDefault",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 960,
        "wires": []
    },
    {
        "id": "f0e1e1cb433c04db",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/resultsDefault",
        "topic": "neo4j/cypherQuery/resultsDefault",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 960,
        "wires": [
            [
                "5ae15fbd62e3fd6f"
            ]
        ]
    },
    {
        "id": "90b0b5f4aad20ae4",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "d": true,
        "name": "mqtt no v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "id123",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 950,
        "y": 1360,
        "wires": []
    },
    {
        "id": "453d2889569b2067",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/resultsDefault",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f7b6843f2fddeaa6",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/resultsDefault",
        "topic": "neo4j/cypherRun/resultsDefault",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "453d2889569b2067"
            ]
        ]
    },
    {
        "id": "1f2380e080c31664",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/request - regular \"json object\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherRun/request",
        "payload": "{\"message\":\"response goes to provided topic\"}",
        "payloadType": "json",
        "x": 280,
        "y": 1340,
        "wires": [
            [
                "90b0b5f4aad20ae4",
                "6b87aa6409a6f005",
                "b6e204095a4f9314"
            ]
        ]
    },
    {
        "id": "0c61c11cf81b989b",
        "type": "inject",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/request - error",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherRun/request",
        "payload": "{\"noMessage\":123}",
        "payloadType": "json",
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "90b0b5f4aad20ae4",
                "6b87aa6409a6f005",
                "b6e204095a4f9314"
            ]
        ]
    },
    {
        "id": "83c920bce1f5d9bd",
        "type": "comment",
        "z": "976b8220983f052f",
        "name": "README cypherRun",
        "info": "// --- listen on 'neo4j/cypherQuery/request' with an default response topics passed as option \"responseTopic\"\nCALL mqtt.subscribeCypherRun(\n  'neo4jMqttClientId', \n  'neo4j/cypherRun/request',\n  'MERGE (n:MqttTestSubscribe) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n', // CYPHER query - query params will be received by the message\n  {                 // options map with default response topis where query results will be published\n    responseTopic:'neo4j/cypherRun/resultsDefault'\n  } \n)",
        "x": 160,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5c8308ec228efdfc",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/path",
        "topic": "mqtt/topic/path",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "3e47a267f9a3e8db"
            ]
        ]
    },
    {
        "id": "3e47a267f9a3e8db",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/path",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "00e9e98d5b8effbe",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "d": true,
        "name": "all messages -  #",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "d06f617be9878338"
            ]
        ]
    },
    {
        "id": "d06f617be9878338",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "all messages - #",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "2096792f79f282a2",
        "type": "comment",
        "z": "976b8220983f052f",
        "name": "MqTT publish",
        "info": "// --- Publish MqTT Message \nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/path', \n    {message:123}\n)\n\n// --- Publish MqTT Message with MqTT V5 options\nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/path', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\",\n        correlationData:\"messageId-123\" \n    }\n)\n\n// --- AES-CBC encript MqTT payload\nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/pathEncripted', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\", \n        correlationData:\"messageId-123\",\n        encription: \"aes-cbc\",\n        ivBase64: \"FnAxDoCHpgHkrZr3jRGmbA==\",\n        keyBase64: \"2ggLKL4wxTwmZQ8kPMCT8A==\"\n    }  \n)\n\n\n\n// --- use in Cypher\nWITH {message:\"return messsage\"} AS messageToReturn\nRETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', messageToReturn)\nMATCH (n) WITH n  RETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', n)\nMATCH (n) WITH n  RETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', COLLECT(n))\n\n\n// --- return JSON graph export \nCALL apoc.export.json.query(\n    \"MATCH (u) return u\",\n    null,\n    {stream: true}\n)\nYIELD  data\n//RETURN data\nmqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', data))\n\n// --- trigger\nhttps://neo4j.com/docs/apoc/current/background-operations/triggers/#_list_of_triggers\n\napoc.conf\napoc.trigger.enabled=true\napoc.trigger.refresh=600\n\nneo4j.conf\ndbms.security.procedures.unrestricted=apoc.*\n\n:use system\nCALL apoc.trigger.install(\n    'neo4j',\n    'send-mqtt-message-when-new-node',\n    'UNWIND $createdNodes AS n WITH n RETURN mqtt.publishMessage(\"neo4jMqttClientId\", \"mqtt/topic/path\", n)',\n    {phase: 'afterAsync'}    \n);\n:use neo4j\n\n// --- test\nCREATE (n:MqttTest)\nRETURN n\n\n\n\n\n\n// --- \nCALL mqtt.publishGrph(\n    'neo4jMqttClientId', \n    'mqtt/topic/path',\n    'MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\",\n        correlationData:\"messageId-123\" \n    }\n)",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "dc5a99a1f190e148",
        "type": "comment",
        "z": "976b8220983f052f",
        "name": "MqTT Neo4j plugin",
        "info": "##  Neo4j DB Dashboard\nhttp://localhost:7474/browser/\n\n\n## Register Neo4j MqTT Client and Connect the MqTT Broker\nCYPHER query\n```cypher\nRETURN mqtt.connectBroker(\n    'neo4jMqttClientId',          // Unique ID of the MqTT Client\n    {\n        serverHost:'localhost',   // MqTT Broker IP Address\n        serverPort:1883           // MqTT Broker Port\n    }\n)\n```\n\n## List Neo4j MqTT Clients/Connections and Show Details\nCYPHER query\n```cypher\nRETURN mqtt.listBrokers()\n```\n\n## Disconnect MqTT Broker and Unregister Neo4j MqTT Client\nCYPHER query\n```cypher\nRETURN mqtt.disconnectBroker(\n  'neo4jMqttClientId'           // Neo4j MqTT Client ID to Disconnect\n)\n```\n# Generate AES-CBC Encryption Key (key) and Initialization Vector (iv)\nNeo4j MqTT broker client supports AES-CBC payload encription. Base64 encoded key and iv is needed. Utility function \"generateAesCbcKeyIv\" will generate 256 AES-CBC key and iv for symetric encription - see examples of using provided keys.\n\nCYPHER query\n```cypher\nRETURN mqtt.generateAesCbcKeyIv()\n```\n\n",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "c6b09e6565f14d0e",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "d": true,
        "name": "mqtt no v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "04dddfac8a3da43b",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherQuery/resultsEncripted",
        "contentType": "",
        "userProps": "",
        "correl": "correlation",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 1410,
        "y": 580,
        "wires": []
    },
    {
        "id": "c7b1b268711b0da9",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/pathEncripted",
        "topic": "mqtt/topic/pathEncripted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "5f4891eb89d6b5de",
                "7b2273d4c5d4fc1d"
            ]
        ]
    },
    {
        "id": "5f4891eb89d6b5de",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "21c38597909a39e9"
            ]
        ]
    },
    {
        "id": "4744b0f30306054a",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/pathEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "7b2273d4c5d4fc1d",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/pathEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 240,
        "wires": []
    },
    {
        "id": "034f4ec8893c0dde",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "get key/iv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: msg.payload,\n    topic:msg.topic,\n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 580,
        "wires": [
            [
                "c9e9c37d5df60827"
            ]
        ]
    },
    {
        "id": "029a5607255c6ed0",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "to base64",
        "func": "return {\n    payload: Buffer.from(msg.payload.encrypted, 'hex').toString('base64'),\n    topic: \"neo4j/cypherQuery/requestEncripted\"\n}\n\n   //    encriptedHex: msg.payload.encrypted,\n   //     encriptedBase64: Buffer.from(msg.payload.encrypted, 'hex').toString('base64')\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 580,
        "wires": [
            [
                "04dddfac8a3da43b"
            ]
        ]
    },
    {
        "id": "d615188c6fb4abe7",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/request",
        "topic": "neo4j/cypherRun/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1580,
        "wires": [
            [
                "ee8773b94fcb3266"
            ]
        ]
    },
    {
        "id": "ee8773b94fcb3266",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1580,
        "wires": []
    },
    {
        "id": "0552d50b212af378",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/results",
        "topic": "neo4j/cypherRun/results",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "16cd0e522aca8866"
            ]
        ]
    },
    {
        "id": "16cd0e522aca8866",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1760,
        "wires": []
    },
    {
        "id": "effebb37bdd06fd7",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request",
        "topic": "neo4j/cypherQuery/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 700,
        "wires": [
            [
                "81df47f8533e1c7f"
            ]
        ]
    },
    {
        "id": "81df47f8533e1c7f",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 700,
        "wires": []
    },
    {
        "id": "bb1d0cce136454c8",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/requestEncripted",
        "topic": "neo4j/cypherQuery/requestEncripted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 760,
        "wires": [
            [
                "22024bd2c17c85b1"
            ]
        ]
    },
    {
        "id": "22024bd2c17c85b1",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/requestEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 760,
        "wires": []
    },
    {
        "id": "10a4d1d09fa311fa",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/resultsEncripted",
        "topic": "neo4j/cypherQuery/resultsEncripted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 900,
        "wires": [
            [
                "41b1e18c5ca02b1a",
                "15bd79be8b00ba6f"
            ]
        ]
    },
    {
        "id": "41b1e18c5ca02b1a",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 920,
        "wires": [
            [
                "ef1d6f2e739586a0"
            ]
        ]
    },
    {
        "id": "d19b9de01758a4ca",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherQuery/resultsEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 900,
        "wires": []
    },
    {
        "id": "15bd79be8b00ba6f",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "mqtt/topic/pathEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 880,
        "wires": []
    },
    {
        "id": "ee2c1e71fd08e132",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/requestEncripted",
        "topic": "neo4j/cypherRun/requestEncripted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1640,
        "wires": [
            [
                "1dbb7ef496bf5a05"
            ]
        ]
    },
    {
        "id": "1dbb7ef496bf5a05",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/requestEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1640,
        "wires": []
    },
    {
        "id": "a95341a1039ca2ce",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherRun/resultsEncripted",
        "contentType": "",
        "userProps": "",
        "correl": "correlation",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 1450,
        "y": 1420,
        "wires": []
    },
    {
        "id": "b6e204095a4f9314",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "get key/iv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: msg.payload,\n    topic:msg.topic,\n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "c95eb8f31184223a"
            ]
        ]
    },
    {
        "id": "bddcd123cb96f0d0",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "to base64",
        "func": "return {\n    payload: Buffer.from(msg.payload.encrypted, 'hex').toString('base64'),\n    topic: \"neo4j/cypherQuery/requestEncripted\"\n}\n\n   //    encriptedHex: msg.payload.encrypted,\n   //     encriptedBase64: Buffer.from(msg.payload.encrypted, 'hex').toString('base64')\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1420,
        "wires": [
            [
                "a95341a1039ca2ce"
            ]
        ]
    },
    {
        "id": "6b87aa6409a6f005",
        "type": "mqtt out",
        "z": "976b8220983f052f",
        "d": true,
        "name": "mqtt with v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherRun/results",
        "contentType": "",
        "userProps": "",
        "correl": "id123",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 960,
        "y": 1300,
        "wires": []
    },
    {
        "id": "2551ae36dc15df81",
        "type": "mqtt in",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/resultsEncripted",
        "topic": "neo4j/cypherRun/resultsEncripted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "a3815251e1b9f9b3",
                "d89f47fb34f88f34"
            ]
        ]
    },
    {
        "id": "a3815251e1b9f9b3",
        "type": "function",
        "z": "976b8220983f052f",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1840,
        "wires": [
            [
                "e6ce25de6954277d"
            ]
        ]
    },
    {
        "id": "21e2fc1332365c35",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/resultsEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1820,
        "wires": []
    },
    {
        "id": "d89f47fb34f88f34",
        "type": "debug",
        "z": "976b8220983f052f",
        "name": "neo4j/cypherRun/resultsEncripted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1800,
        "wires": []
    },
    {
        "id": "21c38597909a39e9",
        "type": "cipher",
        "z": "976b8220983f052f",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 720,
        "y": 260,
        "wires": [
            [
                "4744b0f30306054a"
            ]
        ]
    },
    {
        "id": "c9e9c37d5df60827",
        "type": "cipher",
        "z": "976b8220983f052f",
        "name": "encript",
        "function": "Encrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "16",
        "keySize": "16",
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "029a5607255c6ed0"
            ]
        ]
    },
    {
        "id": "ef1d6f2e739586a0",
        "type": "cipher",
        "z": "976b8220983f052f",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 760,
        "y": 900,
        "wires": [
            [
                "d19b9de01758a4ca"
            ]
        ]
    },
    {
        "id": "c95eb8f31184223a",
        "type": "cipher",
        "z": "976b8220983f052f",
        "name": "encript",
        "function": "Encrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "16",
        "keySize": "16",
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "bddcd123cb96f0d0"
            ]
        ]
    },
    {
        "id": "e6ce25de6954277d",
        "type": "cipher",
        "z": "976b8220983f052f",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 760,
        "y": 1820,
        "wires": [
            [
                "21e2fc1332365c35"
            ]
        ]
    }
]