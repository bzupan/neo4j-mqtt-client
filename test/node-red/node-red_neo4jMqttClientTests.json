[
    {
        "id": "d1d775e7f07656eb",
        "type": "tab",
        "label": "Neo4j MqTT Client Test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "34ef6acb071fe7ef",
        "type": "mqtt-broker",
        "name": "mqtt-v5-localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "localhost-mqtt-v5",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5da35bf3ceb00964",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request - regular \"node\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 290,
        "y": 480,
        "wires": [
            [
                "0572de02b2264e82",
                "723428709c536776",
                "11d17ebdfc03763e"
            ]
        ]
    },
    {
        "id": "91a0e2cf677e1acc",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 860,
        "wires": []
    },
    {
        "id": "c4acf2fee3610006",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/results",
        "topic": "neo4j/cypherQuery/results",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 860,
        "wires": [
            [
                "91a0e2cf677e1acc"
            ]
        ]
    },
    {
        "id": "0572de02b2264e82",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "mqtt with v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherQuery/results",
        "contentType": "",
        "userProps": "",
        "correl": "correlationId-test01",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "18e5ddd21b50ee72",
        "type": "comment",
        "z": "d1d775e7f07656eb",
        "name": "README cypherQuery",
        "info": "// --- Subscribe to MqTT Topic for Cypher Query  \nCALL mqtt.subscribeCypherQuery(\n    'neo4jMqttClientId', \n    'neo4j/cypherQuery/request', \n    {\n        responseTopic:'neo4j/cypherQuery/resultsDefault'\n    }\n) \n\n// --- Subscribe to MqTT Topic for Cypher Query  listen encrypted messages\nCALL mqtt.subscribeCypherQuery(\n    'neo4jMqttClientId', \n    'neo4j/cypherQuery/requestEncrypted', \n    {\n        responseTopic:'neo4j/cypherQuery/resultsDefault',\n        encryption: \"aes-cbc\",\n        ivBase64: \"FnAxDoCHpgHkrZr3jRGmbA==\",\n        keyBase64: \"2ggLKL4wxTwmZQ8kPMCT8A==\"\n    }\n)\n\n\n",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "145f15a57541cac1",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request regular \"non graph\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"RETURN 'string string text' AS string\"}",
        "payloadType": "json",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "0572de02b2264e82",
                "723428709c536776",
                "11d17ebdfc03763e"
            ]
        ]
    },
    {
        "id": "0a742d1f5f1b8001",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request - regular \"graph\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message WITH n MERGE (n)-[l:MQTTTest]->(m:MqttTestNode) RETURN *\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "0572de02b2264e82",
                "723428709c536776",
                "11d17ebdfc03763e"
            ]
        ]
    },
    {
        "id": "01e60aede42d496e",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request - error request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{\"query\":\"RETaaURN 'string string text' AS string\",\"params\":{\"message\":\"setup message\"}}",
        "payloadType": "json",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "0572de02b2264e82",
                "723428709c536776",
                "11d17ebdfc03763e"
            ]
        ]
    },
    {
        "id": "032839b7f151f5e4",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request - non regular  empty request ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherQuery/request",
        "payload": "{}",
        "payloadType": "json",
        "x": 300,
        "y": 560,
        "wires": [
            [
                "0572de02b2264e82",
                "723428709c536776",
                "11d17ebdfc03763e"
            ]
        ]
    },
    {
        "id": "9f64d4958e410fd1",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/resultsDefault",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 980,
        "wires": []
    },
    {
        "id": "46c0ce8b567d20d7",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/resultsDefault",
        "topic": "neo4j/cypherQuery/resultsDefault",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 980,
        "wires": [
            [
                "9f64d4958e410fd1"
            ]
        ]
    },
    {
        "id": "2067ae3125c25656",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "mqtt no v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "id123",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 950,
        "y": 1360,
        "wires": []
    },
    {
        "id": "64ed5369a83f66fc",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/resultsDefault",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1780,
        "wires": []
    },
    {
        "id": "13d91f66fd362dcc",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/resultsDefault",
        "topic": "neo4j/cypherRun/resultsDefault",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1780,
        "wires": [
            [
                "64ed5369a83f66fc"
            ]
        ]
    },
    {
        "id": "2cfe860fbde60f3c",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/request - regular \"json object\" request",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherRun/request",
        "payload": "{\"message\":\"response goes to provided topic\"}",
        "payloadType": "json",
        "x": 280,
        "y": 1340,
        "wires": [
            [
                "2067ae3125c25656",
                "6e77eb2c7d243a7b",
                "ae71121570d5231b"
            ]
        ]
    },
    {
        "id": "0109b9b847e7dfd4",
        "type": "inject",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/request - error",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "neo4j/cypherRun/request",
        "payload": "{\"noMessage\":123}",
        "payloadType": "json",
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "2067ae3125c25656",
                "6e77eb2c7d243a7b",
                "ae71121570d5231b"
            ]
        ]
    },
    {
        "id": "407f6773d1fba3d5",
        "type": "comment",
        "z": "d1d775e7f07656eb",
        "name": "README cypherRun",
        "info": "// --- listen on 'neo4j/cypherQuery/request' with an default response topics passed as option \"responseTopic\"\nCALL mqtt.subscribeCypherRun(\n  'neo4jMqttClientId', \n  'neo4j/cypherRun/request',\n  'MERGE (n:MqttTestSubscribe) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n', // CYPHER query - query params will be received by the message\n  {                 // options map with default response topis where query results will be published\n    responseTopic:'neo4j/cypherRun/resultsDefault'\n  } \n)\n\n\n\n// --- Subscribe to MqTT Topic for Cypher RUN  listen encrypted messages\nCALL mqtt.subscribeCypherRun(\n    'neo4jMqttClientId', \n    'neo4j/cypherRun/requestEncrypted', \n     'MERGE (n:MqttTestSubscribe) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n', // CYPHER query - query params will be received by the message\n    {\n        responseTopic:'neo4j/cypherQuery/resultsDefault',\n        encryption: \"aes-cbc\",\n        ivBase64: \"FnAxDoCHpgHkrZr3jRGmbA==\",\n        keyBase64: \"2ggLKL4wxTwmZQ8kPMCT8A==\"\n    }\n)",
        "x": 160,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ceac2f9f6b592df0",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/path",
        "topic": "mqtt/topic/path",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "7c4e4b3fd3664e74"
            ]
        ]
    },
    {
        "id": "7c4e4b3fd3664e74",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/path",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "b93ec7d886f52384",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "d": true,
        "name": "all messages -  #",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "f4561d156e6788fc"
            ]
        ]
    },
    {
        "id": "f4561d156e6788fc",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "all messages - #",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "6ae77fe52983ac24",
        "type": "comment",
        "z": "d1d775e7f07656eb",
        "name": "MqTT publish",
        "info": "// --- Publish MqTT Message \nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/path', \n    {message:123}\n)\n\n// --- Publish MqTT Message with MqTT V5 options\nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/path', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\",\n        correlationData:\"messageId-123\" \n    }\n)\n\n// --- AES-CBC encrypt MqTT payload\nRETURN mqtt.publishMessage(\n    'neo4jMqttClientId', \n    'mqtt/topic/pathEncrypted', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\", \n        correlationData:\"messageId-123\",\n        encryption: \"aes-cbc\",\n        ivBase64: \"FnAxDoCHpgHkrZr3jRGmbA==\",\n        keyBase64: \"2ggLKL4wxTwmZQ8kPMCT8A==\"\n    }  \n)\n\n\n\n// --- use in Cypher\nWITH {message:\"return messsage\"} AS messageToReturn\nRETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', messageToReturn)\nMATCH (n) WITH n  RETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', n)\nMATCH (n) WITH n  RETURN mqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', COLLECT(n))\n\n\n// --- return JSON graph export \nCALL apoc.export.json.query(\n    \"MATCH (u) return u\",\n    null,\n    {stream: true}\n)\nYIELD  data\n//RETURN data\nmqtt.publishMessage('neo4jMqttClientId', 'mqtt/topic/path', data))\n\n// --- trigger\nhttps://neo4j.com/docs/apoc/current/background-operations/triggers/#_list_of_triggers\n\napoc.conf\napoc.trigger.enabled=true\napoc.trigger.refresh=600\n\nneo4j.conf\ndbms.security.procedures.unrestricted=apoc.*\n\n:use system\nCALL apoc.trigger.install(\n    'neo4j',\n    'send-mqtt-message-when-new-node',\n    'UNWIND $createdNodes AS n WITH n RETURN mqtt.publishMessage(\"neo4jMqttClientId\", \"mqtt/topic/path\", n)',\n    {phase: 'afterAsync'}    \n);\n:use neo4j\n\n// --- test\nCREATE (n:MqttTest)\nRETURN n\n\n\n\n\n\n// --- \nCALL mqtt.publishGraph(\n    'neo4jMqttClientId', \n    'mqtt/topic/path',\n    'MERGE (n:MqttTest) ON CREATE SET n.count=1, n.message=$message ON MATCH SET n.count = n.count +1, n.message=$message RETURN n', \n    {message:123}, \n    {\n        responseTopic:\"mqtt/topic/path/response\",\n        correlationData:\"messageId-123\" \n    }\n)",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "210b5154c24ec93a",
        "type": "comment",
        "z": "d1d775e7f07656eb",
        "name": "MqTT Neo4j plugin",
        "info": "##  Neo4j DB Dashboard\nhttp://localhost:7474/browser/\n\n\n## Register Neo4j MqTT Client and Connect the MqTT Broker\nCYPHER query\n```cypher\nRETURN mqtt.connectBroker(\n    'neo4jMqttClientId',          // Unique ID of the MqTT Client\n    {\n        serverHost:'localhost',   // MqTT Broker IP Address\n        serverPort:1883           // MqTT Broker Port\n    }\n)\n```\n\n## List Neo4j MqTT Clients/Connections and Show Details\nCYPHER query\n```cypher\nRETURN mqtt.listBrokers()\n```\n\n## Disconnect MqTT Broker and Unregister Neo4j MqTT Client\nCYPHER query\n```cypher\nRETURN mqtt.disconnectBroker(\n  'neo4jMqttClientId'           // Neo4j MqTT Client ID to Disconnect\n)\n```\n# Generate AES-CBC Encryption Key (key) and Initialization Vector (iv)\nNeo4j MqTT broker client supports AES-CBC payload encryption. Base64 encoded key and iv is needed. Utility function \"generateAesCbcKeyIv\" will generate 256 AES-CBC key and iv for symetric encryption - see examples of using provided keys.\n\nCYPHER query\n```cypher\nRETURN mqtt.generateAesCbcKeyIv()\n```\n\n",
        "x": 170,
        "y": 40,
        "wires": []
    },
    {
        "id": "723428709c536776",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "mqtt no v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "7169620fa7073f2e",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherQuery/resultsEncrypted",
        "contentType": "",
        "userProps": "",
        "correl": "correlation",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 1410,
        "y": 580,
        "wires": []
    },
    {
        "id": "f546f60e05da901e",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/pathEncrypted",
        "topic": "mqtt/topic/pathEncrypted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "eebb8ad33e303142",
                "d7330915115d44f3"
            ]
        ]
    },
    {
        "id": "eebb8ad33e303142",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 280,
        "wires": [
            [
                "eb3a76482aabdc3b"
            ]
        ]
    },
    {
        "id": "101aaa3534fb2a98",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/pathEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "d7330915115d44f3",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/pathEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 240,
        "wires": []
    },
    {
        "id": "11d17ebdfc03763e",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "get key/iv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: msg.payload,\n    topic:msg.topic,\n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 580,
        "wires": [
            [
                "7b6ae59673a8f5be"
            ]
        ]
    },
    {
        "id": "9c97d2d9c5c73eef",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "to base64",
        "func": "return {\n    payload: Buffer.from(msg.payload.encrypted, 'hex').toString('base64'),\n    topic: \"neo4j/cypherQuery/requestEncrypted\"\n}\n\n   //    encryptedHex: msg.payload.encrypted,\n   //     encryptedBase64: Buffer.from(msg.payload.encrypted, 'hex').toString('base64')\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 580,
        "wires": [
            [
                "7169620fa7073f2e"
            ]
        ]
    },
    {
        "id": "b7ae19b949db4766",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/request",
        "topic": "neo4j/cypherRun/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 1520,
        "wires": [
            [
                "d8e4efe33ae33e1d"
            ]
        ]
    },
    {
        "id": "d8e4efe33ae33e1d",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1520,
        "wires": []
    },
    {
        "id": "222cbea489d18794",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/results",
        "topic": "neo4j/cypherRun/results",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1660,
        "wires": [
            [
                "4656cb08a5a21603"
            ]
        ]
    },
    {
        "id": "4656cb08a5a21603",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1660,
        "wires": []
    },
    {
        "id": "ef11ac8549c4c33d",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request",
        "topic": "neo4j/cypherQuery/request",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 700,
        "wires": [
            [
                "be30c148028244ac"
            ]
        ]
    },
    {
        "id": "be30c148028244ac",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 700,
        "wires": []
    },
    {
        "id": "adc2c0144e3551a5",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/requestEncrypted",
        "topic": "neo4j/cypherQuery/requestEncrypted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 760,
        "wires": [
            [
                "6f4329c362960073"
            ]
        ]
    },
    {
        "id": "6f4329c362960073",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/requestEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 760,
        "wires": []
    },
    {
        "id": "493a0db824688b88",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/resultsEncrypted",
        "topic": "neo4j/cypherQuery/resultsEncrypted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 920,
        "wires": [
            [
                "a3c999b1c4eaab42",
                "a21b1e2a72247538"
            ]
        ]
    },
    {
        "id": "a3c999b1c4eaab42",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 940,
        "wires": [
            [
                "c3476018995497d1"
            ]
        ]
    },
    {
        "id": "d90d9dae0d046902",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherQuery/resultsEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 920,
        "wires": []
    },
    {
        "id": "a21b1e2a72247538",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "mqtt/topic/pathEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 900,
        "wires": []
    },
    {
        "id": "5b919959e93d7b55",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/requestEncrypted",
        "topic": "neo4j/cypherRun/requestEncrypted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1580,
        "wires": [
            [
                "fea71f859f3973dd"
            ]
        ]
    },
    {
        "id": "fea71f859f3973dd",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/requestEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1580,
        "wires": []
    },
    {
        "id": "de9b476c5c147679",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherRun/resultsEncrypted",
        "contentType": "",
        "userProps": "",
        "correl": "correlation",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 1450,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ae71121570d5231b",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "get key/iv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: msg.payload,\n    topic:msg.topic,\n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "65e9d29cf56b8fc4"
            ]
        ]
    },
    {
        "id": "a945ad5c396be87c",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "to base64",
        "func": "return {\n    payload: Buffer.from(msg.payload.encrypted, 'hex').toString('base64'),\n    topic: \"neo4j/cypherRun/requestEncrypted\"\n}\n\n   //    encryptedHex: msg.payload.encrypted,\n   //     encryptedBase64: Buffer.from(msg.payload.encrypted, 'hex').toString('base64')\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1420,
        "wires": [
            [
                "de9b476c5c147679"
            ]
        ]
    },
    {
        "id": "6e77eb2c7d243a7b",
        "type": "mqtt out",
        "z": "d1d775e7f07656eb",
        "name": "mqtt with v5 options",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "neo4j/cypherRun/results",
        "contentType": "",
        "userProps": "",
        "correl": "id123",
        "expiry": "",
        "broker": "34ef6acb071fe7ef",
        "x": 960,
        "y": 1300,
        "wires": []
    },
    {
        "id": "839c263db350afe2",
        "type": "mqtt in",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/resultsEncrypted",
        "topic": "neo4j/cypherRun/resultsEncrypted",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "34ef6acb071fe7ef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1720,
        "wires": [
            [
                "3a868115a8fa2989",
                "7b5f0c080fd057af"
            ]
        ]
    },
    {
        "id": "3a868115a8fa2989",
        "type": "function",
        "z": "d1d775e7f07656eb",
        "name": "base64 to hex + add keyIv",
        "func": "var keyIv = {\n  \"ivBase64\": \"FnAxDoCHpgHkrZr3jRGmbA==\",\n  \"keyHex\": \"da080b28be30c53c26650f243cc093f0\",\n  \"keyBase64\": \"2ggLKL4wxTwmZQ8kPMCT8A==\",\n  \"ivHex\": \"1670310e8087a601e4ad9af78d11a66c\"\n}\n\nreturn {\n    payload: Buffer.from(msg.payload, 'base64').toString('hex'), \n    key: keyIv.keyHex,\n    iv: keyIv.ivHex\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1740,
        "wires": [
            [
                "46d6af0f769cc7e7"
            ]
        ]
    },
    {
        "id": "a4bc865a534c3a6b",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/resultsEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1720,
        "wires": []
    },
    {
        "id": "7b5f0c080fd057af",
        "type": "debug",
        "z": "d1d775e7f07656eb",
        "name": "neo4j/cypherRun/resultsEncrypted",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1700,
        "wires": []
    },
    {
        "id": "eb3a76482aabdc3b",
        "type": "cipher",
        "z": "d1d775e7f07656eb",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 720,
        "y": 260,
        "wires": [
            [
                "101aaa3534fb2a98"
            ]
        ]
    },
    {
        "id": "7b6ae59673a8f5be",
        "type": "cipher",
        "z": "d1d775e7f07656eb",
        "name": "encrypt",
        "function": "Encrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "16",
        "keySize": "16",
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "9c97d2d9c5c73eef"
            ]
        ]
    },
    {
        "id": "c3476018995497d1",
        "type": "cipher",
        "z": "d1d775e7f07656eb",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 750,
        "y": 920,
        "wires": [
            [
                "d90d9dae0d046902"
            ]
        ]
    },
    {
        "id": "65e9d29cf56b8fc4",
        "type": "cipher",
        "z": "d1d775e7f07656eb",
        "name": "encrypt",
        "function": "Encrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "16",
        "keySize": "16",
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "a945ad5c396be87c"
            ]
        ]
    },
    {
        "id": "46d6af0f769cc7e7",
        "type": "cipher",
        "z": "d1d775e7f07656eb",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-CBC",
        "iv": "",
        "key": "",
        "ivSize": "32",
        "keySize": "16",
        "x": 740,
        "y": 1720,
        "wires": [
            [
                "a4bc865a534c3a6b"
            ]
        ]
    }
]